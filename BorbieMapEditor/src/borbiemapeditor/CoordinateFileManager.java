package borbiemapeditor;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.List;

/**
 *
 * @author richard
 */
public class CoordinateFileManager {
    
    
    // file version
    public static final String COORDINATE_FILE_VERSION = "1.0";
    
    // number of decimal places to export with
    public static final int COORDINATE_DECIMAL_PLACES = 6;
    
    
    // builds an arraylist of MapObjects from a coordinate file
    public static List<MapObject> importCoordinatesFromFile(
            String sourceFilePath){
        return null;
    }
    
    
    // exports the coordinates of the given list of objects to a coordinate file
    // PARAMETERS:  mapObjects is the arraylist of all map objects to export
    //              mapWidth, mapHeight are the size of the map image (needed
    //                  to convert the location coordinates relatively)
    //              targetFileName is the FULL PATH of the target coordinate file.
    public static void exportCoordinatesToFile(
            List<MapObject> mapObjects,
            int mapWidth, int mapHeight,
            String targetFilePath) throws Exception {

        BufferedWriter out =
                new BufferedWriter(new FileWriter(targetFilePath));
        
        // write initial file header (comment)
        out.write("# Borbie's Big Adventure: Let's Hit the Town!");
        out.newLine();
        out.write("# Map Coordinate File VERSION " + COORDINATE_FILE_VERSION);
        out.newLine();
        out.write("# Generated by Borbie Map Editor");
        out.newLine();
        out.newLine();
        
        double roundMultiplier = Math.pow(10, COORDINATE_DECIMAL_PLACES);
        
        // write the coordinate data here
        int numObjects = mapObjects.size();
        for(int i=0; i<numObjects; i++){
            MapObject mapObj = mapObjects.get(i);
            
            // calculate the relative position
            double xCoord = 1.0 - ((1.0 / mapWidth) * mapObj.x);
            double yCoord = (1.0 / mapHeight) * mapObj.y;
            
            // scale it to the desired number of decimal places
            xCoord = Math.round(xCoord * roundMultiplier) / roundMultiplier;
            yCoord = Math.round(yCoord * roundMultiplier) / roundMultiplier;
            
            // write the position to the file (depending on type)
            String typeLabel = "";
            switch(mapObj.type){
                case MapObject.TYPE_BUILDING:
                    typeLabel = "b";
                    break;
                case MapObject.TYPE_TREE:
                    typeLabel = "t";
                    break;
                case MapObject.TYPE_LAMP:
                    typeLabel = "l";
                    break;
                default:
                    break;
            }
            out.write(typeLabel + " " + xCoord + " " + yCoord);
            out.newLine();
        }
        
        out.close();
    }
}
